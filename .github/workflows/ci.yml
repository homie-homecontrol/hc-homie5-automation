name: CI and Publish

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [x86_64, aarch64, armv7]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-dev lua5.4 liblua5.4-dev pkg-config

      - name: Set up target
        run: |
          case ${{ matrix.platform }} in
            x86_64) echo "TARGET=x86_64-unknown-linux-gnu" >> $GITHUB_ENV ;;
            aarch64) echo "TARGET=aarch64-unknown-linux-gnu" >> $GITHUB_ENV ;;
            armv7) echo "TARGET=armv7-unknown-linux-gnueabihf" >> $GITHUB_ENV ;;
          esac

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ matrix.platform }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform }}-

      - name: Build binary
        run: cargo build --release --target ${{ env.TARGET }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: hc-homie5-automation-${{ matrix.platform }}
          path: target/${{ env.TARGET }}/release/hc-homie5-automation

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    strategy:
      matrix:
        platform: [x86_64, aarch64, armv7]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: hc-homie5-automation-${{ matrix.platform }}
          path: .

      - name: Set permissions
        run: chmod +x hc-homie5-automation

      - name: Determine version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-${{ matrix.platform }}
          build-args: |
            VERSION=${{ env.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  manifest:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Create manifest
        run: |
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-x86_64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-aarch64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-armv7
